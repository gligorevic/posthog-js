{"version":3,"file":"posthog-people.js","sourceRoot":"","sources":["../../src/posthog-people.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint camelcase: \"off\" */\nimport { addOptOutCheck } from './gdpr-utils'\nimport { _base64Encode, _copyAndTruncateStrings, _each, _encodeDates, _extend, _info, _isObject } from './utils'\nimport { PostHogConfig, Properties, RequestCallback } from './types'\nimport { PostHog } from './posthog-core'\n\nconst SET_ACTION = '$set'\nconst SET_ONCE_ACTION = '$set_once'\n\n/**\n * PostHog People Object\n * @constructor\n */\nclass PostHogPeople {\n    _posthog: PostHog\n\n    set: (prop: string | Properties, to?: string, callback?: RequestCallback) => void\n    set_once: (prop: string | Properties, to?: string, callback?: RequestCallback) => void\n\n    constructor(posthog: PostHog) {\n        this._posthog = posthog\n\n        /*\n         * Set properties on a user record.\n         *\n         * ### Usage:\n         *\n         *     posthog.people.set('gender', 'm');\n         *\n         *     // or set multiple properties at once\n         *     posthog.people.set({\n         *         'Company': 'Acme',\n         *         'Plan': 'Premium',\n         *         'Upgrade date': new Date()\n         *     });\n         *     // properties can be strings, integers, dates, or lists\n         *\n         * @param {Object|String} prop If a string, this is the name of the property. If an object, this is an associative array of names and values.\n         * @param {*} [to] A value to set on the given property name\n         * @param {Function} [callback] If provided, the callback will be called after capturing the event.\n         */\n        this.set = addOptOutCheck(posthog, (prop: string | Properties, to?: string, callback?: RequestCallback) => {\n            const data = this.set_action(prop, to)\n\n            // Update current user properties\n            this._posthog.setPersonPropertiesForFlags(data['$set'] || {})\n\n            if (_isObject(prop)) {\n                callback = to as any\n            }\n            // make sure that the referrer info has been updated and saved\n            if (this._get_config('save_referrer')) {\n                this._posthog.sessionPersistence.update_referrer_info()\n            }\n\n            // update $set object with default people properties\n            data[SET_ACTION] = _extend(\n                {},\n                _info.people_properties(),\n                this._posthog.sessionPersistence.get_referrer_info(),\n                data[SET_ACTION]\n            )\n            return this._send_request(data, callback)\n        })\n\n        /*\n         * Set properties on a user record, only if they do not yet exist.\n         * This will not overwrite previous people property values, unlike\n         * people.set().\n         *\n         * ### Usage:\n         *\n         *     posthog.people.set_once('First Login Date', new Date());\n         *\n         *     // or set multiple properties at once\n         *     posthog.people.set_once({\n         *         'First Login Date': new Date(),\n         *         'Starting Plan': 'Premium'\n         *     });\n         *\n         *     // properties can be strings, integers or dates\n         *\n         * @param {Object|String} prop If a string, this is the name of the property. If an object, this is an associative array of names and values.\n         * @param {*} [to] A value to set on the given property name\n         * @param {Function} [callback] If provided, the callback will be called after capturing the event.\n         */\n        this.set_once = addOptOutCheck(\n            posthog,\n            (prop: string | Properties, to?: string, callback?: RequestCallback) => {\n                const data = this.set_once_action(prop, to)\n                if (_isObject(prop)) {\n                    callback = to as any\n                }\n                return this._send_request(data, callback)\n            }\n        )\n    }\n\n    toString(): string {\n        return this._posthog.toString() + '.people'\n    }\n\n    _send_request(data: Properties, callback?: RequestCallback): Properties {\n        data['$token'] = this._get_config('token')\n        data['$distinct_id'] = this._posthog.get_distinct_id()\n        const device_id = this._posthog.get_property('$device_id')\n        const user_id = this._posthog.get_property('$user_id')\n        const had_persisted_distinct_id = this._posthog.get_property('$had_persisted_distinct_id')\n        if (device_id) {\n            data['$device_id'] = device_id\n        }\n        if (user_id) {\n            data['$user_id'] = user_id\n        }\n        if (had_persisted_distinct_id) {\n            data['$had_persisted_distinct_id'] = had_persisted_distinct_id\n        }\n\n        const date_encoded_data = _encodeDates(data)\n        const truncated_data = _copyAndTruncateStrings(\n            date_encoded_data,\n            this._get_config('properties_string_max_length')\n        )\n        const json_data = JSON.stringify(date_encoded_data)\n        const encoded_data = _base64Encode(json_data)\n\n        this._posthog._send_request(\n            this._get_config('api_host') + '/engage/',\n            { data: encoded_data },\n            {},\n            this._posthog._prepare_callback(callback, truncated_data) as RequestCallback\n        )\n\n        return truncated_data\n    }\n\n    _get_config<K extends keyof PostHogConfig>(conf_var: K): PostHogConfig[K] {\n        return this._posthog.get_config(conf_var)\n    }\n\n    _is_reserved_property(prop: string): boolean {\n        return (\n            prop === '$distinct_id' ||\n            prop === '$token' ||\n            prop === '$device_id' ||\n            prop === '$user_id' ||\n            prop === '$had_persisted_distinct_id'\n        )\n    }\n\n    // Internal methods for posthog.people API.\n    // These methods shouldn't involve network I/O.\n    private set_action(prop: string | Properties, to?: string): Properties {\n        return this.apiActionParser(SET_ACTION, prop, to)\n    }\n\n    private set_once_action(prop: string | Properties, to?: string): Properties {\n        return this.apiActionParser(SET_ONCE_ACTION, prop, to)\n    }\n\n    private apiActionParser(actionType: '$set' | '$set_once', prop: string | Properties, to?: string): Properties {\n        const data: Properties = {}\n        const props: Properties = {}\n\n        if (_isObject(prop)) {\n            _each(prop, (v, k: string) => {\n                if (!(this as any)._is_reserved_property(k)) {\n                    props[k] = v\n                }\n            })\n        } else {\n            props[prop] = to\n        }\n\n        data[actionType] = props\n        return data\n    }\n}\n\nexport { PostHogPeople }\n"]}