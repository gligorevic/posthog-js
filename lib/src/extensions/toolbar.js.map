{"version":3,"file":"toolbar.js","sourceRoot":"","sources":["../../../src/extensions/toolbar.ts"],"names":[],"mappings":"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","sourcesContent":["import { _getHashParam, _register_event, loadScript, logger } from '../utils'\nimport { PostHog } from '../posthog-core'\nimport { DecideResponse, ToolbarParams } from '../types'\nimport { POSTHOG_MANAGED_HOSTS } from './cloud'\n\nexport class Toolbar {\n    instance: PostHog\n    constructor(instance: PostHog) {\n        this.instance = instance\n    }\n\n    afterDecideResponse(response: DecideResponse) {\n        const toolbarParams: ToolbarParams =\n            response['toolbarParams'] ||\n            response['editorParams'] ||\n            (response['toolbarVersion'] ? { toolbarVersion: response['toolbarVersion'] } : {})\n        if (\n            response['isAuthenticated'] &&\n            toolbarParams['toolbarVersion'] &&\n            toolbarParams['toolbarVersion'].indexOf('toolbar') === 0\n        ) {\n            this.loadToolbar({\n                ...toolbarParams,\n                apiURL: this.instance.get_config('api_host'),\n            })\n        }\n    }\n\n    /**\n     * To load the toolbar, we need an access token and other state. That state comes from one of three places:\n     * 1. In the URL hash params\n     * 2. From session storage under the key `toolbarParams` if the toolbar was initialized on a previous page\n     */\n    maybeLoadToolbar(\n        location = window.location,\n        localStorage: Storage | undefined = undefined,\n        history = window.history\n    ): boolean {\n        try {\n            // Before running the code we check if we can access localStorage, if not we opt-out\n            if (!localStorage) {\n                try {\n                    window.localStorage.setItem('test', 'test')\n                    window.localStorage.removeItem('test')\n                } catch (error) {\n                    return false\n                }\n\n                // If localStorage was undefined, and localStorage is supported we set the default value\n                localStorage = window.localStorage\n            }\n\n            const stateHash = _getHashParam(location.hash, '__posthog') || _getHashParam(location.hash, 'state')\n            const state = stateHash ? JSON.parse(decodeURIComponent(stateHash)) : null\n            const parseFromUrl = state && state['action'] === 'ph_authorize'\n            let toolbarParams: ToolbarParams\n\n            if (parseFromUrl) {\n                // happens if they are initializing the toolbar using an old snippet\n                toolbarParams = state\n                toolbarParams.source = 'url'\n\n                if (toolbarParams && Object.keys(toolbarParams).length > 0) {\n                    if (state['desiredHash']) {\n                        // hash that was in the url before the redirect\n                        location.hash = state['desiredHash']\n                    } else if (history) {\n                        history.replaceState('', document.title, location.pathname + location.search) // completely remove hash\n                    } else {\n                        location.hash = '' // clear hash (but leaves # unfortunately)\n                    }\n                }\n            } else {\n                // get credentials from localStorage from a previous initialzation\n                toolbarParams = JSON.parse(localStorage.getItem('_postHogToolbarParams') || '{}')\n                toolbarParams.source = 'localstorage'\n\n                // delete \"add-action\" or other intent from toolbarParams, otherwise we'll have the same intent\n                // every time we open the page (e.g. you just visiting your own site an hour later)\n                delete toolbarParams.userIntent\n            }\n\n            if (!toolbarParams.apiURL) {\n                toolbarParams.apiURL = this.instance.get_config('api_host')\n            }\n\n            if (toolbarParams['token'] && this.instance.get_config('token') === toolbarParams['token']) {\n                this.loadToolbar(toolbarParams)\n                return true\n            } else {\n                return false\n            }\n        } catch (e) {\n            return false\n        }\n    }\n\n    loadToolbar(params?: ToolbarParams): boolean {\n        if ((window as any)['_postHogToolbarLoaded']) {\n            return false\n        }\n        // only load the toolbar once, even if there are multiple instances of PostHogLib\n        ;(window as any)['_postHogToolbarLoaded'] = true\n\n        // the toolbar does not use the `jsURL` as that route is cached for 24 hours.\n        // By design array.js, recorder.js, and toolbar.js are served from Django with no or limited caching, not from our CDN\n        // Django respects the query params for caching, returning a 304 if appropriate\n        const host = params?.['apiURL'] || this.instance.get_config('api_host')\n        const timestampToNearestThirtySeconds = Math.floor(Date.now() / 30000) * 30000\n        const toolbarUrl = `${host}${\n            host.endsWith('/') ? '' : '/'\n        }static/toolbar.js?_ts=${timestampToNearestThirtySeconds}`\n        const disableToolbarMetrics =\n            !POSTHOG_MANAGED_HOSTS.includes(this.instance.get_config('api_host')) &&\n            this.instance.get_config('advanced_disable_toolbar_metrics')\n\n        const toolbarParams = {\n            apiURL: host, // defaults to api_host from the instance config if nothing else set\n            jsURL: host, // defaults to api_host from the instance config if nothing else set\n            token: this.instance.get_config('token'),\n            ...params,\n            ...(disableToolbarMetrics ? { instrument: false } : {}),\n        }\n\n        const { source: _discard, ...paramsToPersist } = toolbarParams // eslint-disable-line\n        window.localStorage.setItem('_postHogToolbarParams', JSON.stringify(paramsToPersist))\n\n        loadScript(toolbarUrl, (err) => {\n            if (err) {\n                logger.error('Failed to load toolbar', err)\n                return\n            }\n            ;((window as any)['ph_load_toolbar'] || (window as any)['ph_load_editor'])(toolbarParams, this.instance)\n        })\n        // Turbolinks doesn't fire an onload event but does replace the entire body, including the toolbar.\n        // Thus, we ensure the toolbar is only loaded inside the body, and then reloaded on turbolinks:load.\n        _register_event(window, 'turbolinks:load', () => {\n            ;(window as any)['_postHogToolbarLoaded'] = false\n            this.loadToolbar(toolbarParams)\n        })\n        return true\n    }\n\n    /** @deprecated Use \"loadToolbar\" instead. */\n    _loadEditor(params: ToolbarParams): boolean {\n        return this.loadToolbar(params)\n    }\n\n    /** @deprecated Use \"maybeLoadToolbar\" instead. */\n    maybeLoadEditor(\n        location = window.location,\n        localStorage: Storage | undefined = undefined,\n        history = window.history\n    ): boolean {\n        return this.maybeLoadToolbar(location, localStorage, history)\n    }\n}\n"]}