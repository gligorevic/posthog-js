{"version":3,"file":"web-performance.js","sourceRoot":"","sources":["../../../src/extensions/web-performance.ts"],"names":[],"mappings":"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","sourcesContent":["import { isLocalhost, logger } from '../utils'\nimport { PostHog } from '../posthog-core'\nimport { DecideResponse } from '../types'\n\nconst PERFORMANCE_EVENTS_MAPPING: { [key: string]: number } = {\n    // BASE_PERFORMANCE_EVENT_COLUMNS\n    entryType: 0,\n    timeOrigin: 1,\n    name: 2,\n\n    // RESOURCE_EVENT_COLUMNS\n    startTime: 3,\n    redirectStart: 4,\n    redirectEnd: 5,\n    workerStart: 6,\n    fetchStart: 7,\n    domainLookupStart: 8,\n    domainLookupEnd: 9,\n    connectStart: 10,\n    secureConnectionStart: 11,\n    connectEnd: 12,\n    requestStart: 13,\n    responseStart: 14,\n    responseEnd: 15,\n    decodedBodySize: 16,\n    encodedBodySize: 17,\n    initiatorType: 18,\n    nextHopProtocol: 19,\n    renderBlockingStatus: 20,\n    responseStatus: 21,\n    transferSize: 22,\n\n    // LARGEST_CONTENTFUL_PAINT_EVENT_COLUMNS\n    element: 23,\n    renderTime: 24,\n    loadTime: 25,\n    size: 26,\n    id: 27,\n    url: 28,\n\n    // NAVIGATION_EVENT_COLUMNS\n    domComplete: 29,\n    domContentLoadedEvent: 30,\n    domInteractive: 31,\n    loadEventEnd: 32,\n    loadEventStart: 33,\n    redirectCount: 34,\n    navigationType: 35,\n    unloadEventEnd: 36,\n    unloadEventStart: 37,\n\n    // Added after v1\n    duration: 39,\n    timestamp: 40,\n\n    // NOTE: CURRENTLY UNSUPPORTED\n    // EVENT_TIMING_EVENT_COLUMNS\n    // processingStart: null,\n    // processingEnd: null,\n\n    // MARK_AND_MEASURE_EVENT_COLUMNS\n    // detail: null,\n}\n\nconst ENTRY_TYPES_TO_OBSERVE = [\n    // 'event', // This is too noisy as it covers all browser events\n    'first-input',\n    // 'mark', // Mark is used too liberally. We would need to filter for specific marks\n    // 'measure', // Measure is used too liberally. We would need to filter for specific measures\n    'navigation',\n    'paint',\n    'resource',\n]\n\nconst PERFORMANCE_INGESTION_ENDPOINT = '/e/'\n// Don't monitor posthog paths because then events cause performance events which are events and the snake eats its tail ðŸ˜±\nconst POSTHOG_PATHS_TO_IGNORE = ['/s/', PERFORMANCE_INGESTION_ENDPOINT]\n\nexport class WebPerformanceObserver {\n    instance: PostHog\n    remoteEnabled: boolean | undefined\n    observer: PerformanceObserver | undefined\n\n    // Util to help developers working on this feature manually override\n    _forceAllowLocalhost = false\n\n    constructor(instance: PostHog) {\n        this.instance = instance\n    }\n\n    startObservingIfEnabled() {\n        if (this.isEnabled()) {\n            this.startObserving()\n        } else {\n            this.stopObserving()\n        }\n    }\n\n    startObserving() {\n        if (this.observer) {\n            return\n        }\n\n        if (isLocalhost() && !this._forceAllowLocalhost) {\n            logger.log('PostHog Peformance observer not started because we are on localhost.')\n            return\n        }\n\n        try {\n            this.observer = new PerformanceObserver((list) => {\n                list.getEntries().forEach((entry) => {\n                    this._capturePerformanceEvent(entry)\n                })\n            })\n\n            const entryTypes = PerformanceObserver.supportedEntryTypes.filter((x) => ENTRY_TYPES_TO_OBSERVE.includes(x))\n\n            entryTypes.forEach((entryType) => {\n                this.observer?.observe({ type: entryType, buffered: true })\n            })\n        } catch (e) {\n            console.error('PostHog failed to start performance observer', e)\n            this.stopObserving()\n        }\n    }\n\n    stopObserving() {\n        if (this.observer) {\n            this.observer.disconnect()\n            this.observer = undefined\n        }\n    }\n\n    isObserving() {\n        return !!this.observer\n    }\n\n    isEnabled() {\n        return this.instance.get_config('capture_performance') ?? this.remoteEnabled ?? false\n    }\n\n    afterDecideResponse(response: DecideResponse) {\n        this.remoteEnabled = response.capturePerformance || false\n        if (this.isEnabled()) {\n            this.startObserving()\n        }\n    }\n\n    _capturePerformanceEvent(event: PerformanceEntry) {\n        // NOTE: We don't want to capture our own request events.\n\n        if (event.name.startsWith(this.instance.get_config('api_host'))) {\n            const path = event.name.replace(this.instance.get_config('api_host'), '')\n\n            if (POSTHOG_PATHS_TO_IGNORE.find((x) => path.startsWith(x))) {\n                return\n            }\n        }\n\n        const eventJson = event.toJSON()\n        const properties: { [key: number]: any } = {}\n        // kudos to sentry javascript sdk for excellent background on why to use Date.now() here\n        // https://github.com/getsentry/sentry-javascript/blob/e856e40b6e71a73252e788cd42b5260f81c9c88e/packages/utils/src/time.ts#L70\n        const timeOrigin = Math.floor(Date.now() - performance.now())\n        properties[PERFORMANCE_EVENTS_MAPPING['timeOrigin']] = timeOrigin\n        // clickhouse can't ingest timestamps that are floats\n        // (in this case representing fractions of a millisecond we don't care about anyway)\n        properties[PERFORMANCE_EVENTS_MAPPING['timestamp']] = Math.floor(timeOrigin + event.startTime)\n        for (const key in PERFORMANCE_EVENTS_MAPPING) {\n            if (eventJson[key] !== undefined) {\n                properties[PERFORMANCE_EVENTS_MAPPING[key]] = eventJson[key]\n            }\n        }\n\n        this.capturePerformanceEvent(properties)\n\n        if (exposesServerTiming(event)) {\n            for (const timing of event.serverTiming || []) {\n                this.capturePerformanceEvent({\n                    [PERFORMANCE_EVENTS_MAPPING['timeOrigin']]: timeOrigin,\n                    [PERFORMANCE_EVENTS_MAPPING['timestamp']]: Math.floor(timeOrigin + event.startTime),\n                    [PERFORMANCE_EVENTS_MAPPING['name']]: timing.name,\n                    [PERFORMANCE_EVENTS_MAPPING['duration']]: timing.duration,\n                    // the spec has a closed list of possible types\n                    // https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType\n                    // but, we need to know this was a server timing so that we know to\n                    // match it to the appropriate navigation or resource timing\n                    // that matching will have to be on timestamp and $current_url\n                    [PERFORMANCE_EVENTS_MAPPING['entryType']]: 'serverTiming',\n                })\n            }\n        }\n    }\n\n    /**\n     * :TRICKY: Make sure we batch these requests, and don't truncate the strings.\n     */\n    private capturePerformanceEvent(properties: { [key: number]: any }) {\n        const timestamp = properties[PERFORMANCE_EVENTS_MAPPING['timestamp']]\n\n        this.instance.sessionRecording?.onRRwebEmit({\n            type: 6, // EventType.Plugin,\n            data: {\n                plugin: 'posthog/network@1',\n                payload: properties,\n            },\n            timestamp,\n        })\n\n        // this.instance.capture('$performance_event', properties, {\n        //     transport: 'XHR',\n        //     method: 'POST',\n        //     endpoint: PERFORMANCE_INGESTION_ENDPOINT,\n        //     _noTruncate: true,\n        //     _batchKey: 'performanceEvent',\n        // })\n    }\n}\n\n/**\n *  Check if this PerformanceEntry is either a PerformanceResourceTiming or a PerformanceNavigationTiming\n *  NB PerformanceNavigationTiming extends PerformanceResourceTiming\n *  Here we don't care which interface it implements as both expose `serverTimings`\n */\nconst exposesServerTiming = (event: PerformanceEntry): event is PerformanceResourceTiming =>\n    event.entryType === 'navigation' || event.entryType === 'resource'\n"]}