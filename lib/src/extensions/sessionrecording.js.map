{"version":3,"file":"sessionrecording.js","sourceRoot":"","sources":["../../../src/extensions/sessionrecording.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    CONSOLE_LOG_RECORDING_ENABLED_SERVER_SIDE,\n    SESSION_RECORDING_ENABLED_SERVER_SIDE,\n    SESSION_RECORDING_RECORDER_VERSION_SERVER_SIDE,\n} from '../posthog-persistence'\nimport {\n    filterDataURLsFromLargeDataObjects,\n    FULL_SNAPSHOT_EVENT_TYPE,\n    INCREMENTAL_SNAPSHOT_EVENT_TYPE,\n    META_EVENT_TYPE,\n    MUTATION_SOURCE_TYPE,\n    truncateLargeConsoleLogs,\n} from './sessionrecording-utils'\nimport { PostHog } from '../posthog-core'\nimport { DecideResponse, Properties } from '../types'\nimport type { record } from 'rrweb/typings'\nimport type { eventWithTime, listenerHandler, pluginEvent, recordOptions } from 'rrweb/typings/types'\nimport Config from '../config'\nimport { logger, loadScript } from '../utils'\n\nconst BASE_ENDPOINT = '/e/'\n\nexport class SessionRecording {\n    instance: PostHog\n    captureStarted: boolean\n    snapshots: any[]\n    emit: boolean\n    endpoint: string\n    stopRrweb: listenerHandler | undefined\n    windowId: string | null\n    sessionId: string | null\n    receivedDecide: boolean\n    rrwebRecord: typeof record | undefined\n    recorderVersion?: string\n\n    constructor(instance: PostHog) {\n        this.instance = instance\n        this.captureStarted = false\n        this.snapshots = []\n        this.emit = false // Controls whether data is sent to the server or not\n        this.endpoint = BASE_ENDPOINT\n        this.stopRrweb = undefined\n        this.windowId = null\n        this.sessionId = null\n        this.receivedDecide = false\n    }\n\n    startRecordingIfEnabled() {\n        if (this.isRecordingEnabled()) {\n            this.startCaptureAndTrySendingQueuedSnapshots()\n        } else {\n            this.stopRecording()\n        }\n    }\n\n    started() {\n        return this.captureStarted\n    }\n\n    stopRecording() {\n        if (this.captureStarted && this.stopRrweb) {\n            this.stopRrweb()\n            this.stopRrweb = undefined\n            this.captureStarted = false\n        }\n    }\n\n    isRecordingEnabled() {\n        const enabled_server_side = !!this.instance.get_property(SESSION_RECORDING_ENABLED_SERVER_SIDE)\n        const enabled_client_side = !this.instance.get_config('disable_session_recording')\n        return enabled_server_side && enabled_client_side\n    }\n\n    isConsoleLogCaptureEnabled() {\n        const enabled_server_side = !!this.instance.get_property(CONSOLE_LOG_RECORDING_ENABLED_SERVER_SIDE)\n        const enabled_client_side = this.instance.get_config('enable_recording_console_log')\n        return enabled_client_side ?? enabled_server_side\n    }\n\n    getRecordingVersion() {\n        const recordingVersion_server_side = this.instance.get_property(SESSION_RECORDING_RECORDER_VERSION_SERVER_SIDE)\n        const recordingVersion_client_side = this.instance.get_config('session_recording')?.recorderVersion\n        return recordingVersion_client_side || recordingVersion_server_side || 'v1'\n    }\n\n    afterDecideResponse(response: DecideResponse) {\n        this.receivedDecide = true\n        if (this.instance.persistence) {\n            this.instance.persistence.register({\n                [SESSION_RECORDING_ENABLED_SERVER_SIDE]: !!response['sessionRecording'],\n                [CONSOLE_LOG_RECORDING_ENABLED_SERVER_SIDE]: response.sessionRecording?.consoleLogRecordingEnabled,\n                [SESSION_RECORDING_RECORDER_VERSION_SERVER_SIDE]: response.sessionRecording?.recorderVersion,\n            })\n        }\n        if (response.sessionRecording?.endpoint) {\n            this.endpoint = response.sessionRecording?.endpoint\n        }\n\n        if (response.sessionRecording?.recorderVersion) {\n            this.recorderVersion = response.sessionRecording.recorderVersion\n        }\n        this.startRecordingIfEnabled()\n    }\n\n    startCaptureAndTrySendingQueuedSnapshots() {\n        // Only submit data after we've received a decide response to account for\n        // changing endpoints and the feature being disabled on the server side.\n        if (this.receivedDecide) {\n            this.emit = true\n            this.snapshots.forEach((properties) => this._captureSnapshot(properties))\n        }\n        this._startCapture()\n    }\n\n    _startCapture() {\n        // According to the rrweb docs, rrweb is not supported on IE11 and below:\n        // \"rrweb does not support IE11 and below because it uses the MutationObserver API which was supported by these browsers.\"\n        // https://github.com/rrweb-io/rrweb/blob/master/guide.md#compatibility-note\n        //\n        // However, MutationObserver does exist on IE11, it just doesn't work well and does not detect all changes.\n        // Instead, when we load \"recorder.js\", the first JS error is about \"Object.assign\" being undefined.\n        // Thus instead of MutationObserver, we look for this function and block recording if it's undefined.\n        if (typeof Object.assign === 'undefined') {\n            return\n        }\n\n        // We do not switch recorder versions midway through a recording.\n        if (this.captureStarted || this.instance.get_config('disable_session_recording')) {\n            return\n        }\n\n        this.captureStarted = true\n\n        const recorderJS = this.getRecordingVersion() === 'v2' ? 'recorder-v2.js' : 'recorder.js'\n\n        // If recorder.js is already loaded (if array.full.js snippet is used or posthog-js/dist/recorder is\n        // imported) or matches the requested recorder version, don't load script. Otherwise, remotely import\n        // recorder.js from cdn since it hasn't been loaded.\n        if (this.instance.__loaded_recorder_version !== this.getRecordingVersion()) {\n            loadScript(\n                this.instance.get_config('api_host') + `/static/${recorderJS}?v=${Config.LIB_VERSION}`,\n                (err) => {\n                    if (err) {\n                        return logger.error(`Could not load ${recorderJS}`, err)\n                    }\n\n                    this._onScriptLoaded()\n                }\n            )\n        } else {\n            this._onScriptLoaded()\n        }\n    }\n\n    _updateWindowAndSessionIds(event: eventWithTime) {\n        // Some recording events are triggered by non-user events (e.g. \"X minutes ago\" text updating on the screen).\n        // We don't want to extend the session or trigger a new session in these cases. These events are designated by event\n        // type -> incremental update, and source -> mutation.\n        const isNotUserInteraction =\n            event.type === INCREMENTAL_SNAPSHOT_EVENT_TYPE && event.data?.source === MUTATION_SOURCE_TYPE\n\n        const { windowId, sessionId } = this.instance.sessionManager.checkAndGetSessionAndWindowId(\n            isNotUserInteraction,\n            event.timestamp\n        )\n\n        // Event types FullSnapshot and Meta mean we're already in the process of sending a full snapshot\n        if (\n            this.captureStarted &&\n            (this.windowId !== windowId || this.sessionId !== sessionId) &&\n            [FULL_SNAPSHOT_EVENT_TYPE, META_EVENT_TYPE].indexOf(event.type) === -1\n        ) {\n            try {\n                this.rrwebRecord?.takeFullSnapshot()\n            } catch (e) {\n                // Sometimes a race can occur where the recorder is not fully started yet, so we can't take a full snapshot.\n                logger.error('Error taking full snapshot.', e)\n            }\n        }\n        this.windowId = windowId\n        this.sessionId = sessionId\n    }\n\n    _onScriptLoaded() {\n        // rrweb config info: https://github.com/rrweb-io/rrweb/blob/7d5d0033258d6c29599fb08412202d9a2c7b9413/src/record/index.ts#L28\n        const sessionRecordingOptions: recordOptions<eventWithTime> = {\n            // select set of rrweb config options we expose to our users\n            // see https://github.com/rrweb-io/rrweb/blob/master/guide.md\n            blockClass: 'ph-no-capture',\n            blockSelector: undefined,\n            ignoreClass: 'ph-ignore-input',\n            maskTextClass: 'ph-mask',\n            maskTextSelector: undefined,\n            maskAllInputs: true,\n            maskInputOptions: {},\n            maskInputFn: undefined,\n            slimDOMOptions: {},\n            collectFonts: false,\n            inlineStylesheet: true,\n        }\n        // We switched from loading all of rrweb to just the record part, but\n        // keep backwards compatibility if someone hasn't upgraded PostHog\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        this.rrwebRecord = window.rrweb ? window.rrweb.record : window.rrwebRecord\n\n        // only allows user to set our 'allowlisted' options\n        const userSessionRecordingOptions = this.instance.get_config('session_recording')\n        for (const [key, value] of Object.entries(userSessionRecordingOptions || {})) {\n            if (key in sessionRecordingOptions) {\n                // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                // @ts-ignore\n                sessionRecordingOptions[key] = value\n            }\n        }\n\n        if (!this.rrwebRecord) {\n            logger.error(\n                'onScriptLoaded was called but rrwebRecord is not available. This indicates something has gone wrong.'\n            )\n            return\n        }\n\n        this.stopRrweb = this.rrwebRecord({\n            emit: (event) => {\n                this.onRRwebEmit(event)\n            },\n            plugins:\n                (window as any).rrwebConsoleRecord && this.isConsoleLogCaptureEnabled()\n                    ? [(window as any).rrwebConsoleRecord.getRecordConsolePlugin()]\n                    : [],\n            ...sessionRecordingOptions,\n        })\n\n        // :TRICKY: rrweb does not capture navigation within SPA-s, so hook into our $pageview events to get access to all events.\n        //   Dropping the initial event is fine (it's always captured by rrweb).\n        this.instance._addCaptureHook((eventName) => {\n            // If anything could go wrong here it has the potential to block the main loop so we catch all errors.\n            try {\n                if (eventName === '$pageview') {\n                    this.rrwebRecord?.addCustomEvent('$pageview', { href: window.location.href })\n                }\n            } catch (e) {\n                logger.error('Could not add $pageview to rrweb session', e)\n            }\n        })\n    }\n\n    onRRwebEmit(event: eventWithTime) {\n        event = truncateLargeConsoleLogs(\n            filterDataURLsFromLargeDataObjects(event) as pluginEvent<{ payload: string[] }>\n        ) as eventWithTime\n\n        this._updateWindowAndSessionIds(event)\n\n        const properties = {\n            $snapshot_data: event,\n            $session_id: this.sessionId,\n            $window_id: this.windowId,\n        }\n\n        this.instance._captureMetrics.incr('rrweb-record')\n        this.instance._captureMetrics.incr(`rrweb-record-${event.type}`)\n\n        if (this.emit) {\n            this._captureSnapshot(properties)\n        } else {\n            this.snapshots.push(properties)\n        }\n    }\n\n    _captureSnapshot(properties: Properties) {\n        // :TRICKY: Make sure we batch these requests, use a custom endpoint and don't truncate the strings.\n        this.instance.capture('$snapshot', properties, {\n            transport: 'XHR',\n            method: 'POST',\n            endpoint: this.endpoint,\n            _noTruncate: true,\n            _batchKey: 'sessionRecording',\n            _metrics: {\n                rrweb_full_snapshot: properties.$snapshot_data.type === FULL_SNAPSHOT_EVENT_TYPE,\n            },\n        })\n    }\n}\n"]}