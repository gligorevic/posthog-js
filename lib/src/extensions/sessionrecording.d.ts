import { PostHog } from '../posthog-core';
import { DecideResponse, Properties } from '../types';
import type { record } from '../../rrweb/typings';
import type { eventWithTime, listenerHandler } from '../../rrweb/typings/types';
export declare class SessionRecording {
    instance: PostHog;
    captureStarted: boolean;
    snapshots: any[];
    emit: boolean;
    endpoint: string;
    stopRrweb: listenerHandler | undefined;
    windowId: string | null;
    sessionId: string | null;
    receivedDecide: boolean;
    rrwebRecord: typeof record | undefined;
    recorderVersion?: string;
    constructor(instance: PostHog);
    startRecordingIfEnabled(): void;
    started(): boolean;
    stopRecording(): void;
    isRecordingEnabled(): boolean;
    isConsoleLogCaptureEnabled(): boolean;
    getRecordingVersion(): any;
    afterDecideResponse(response: DecideResponse): void;
    startCaptureAndTrySendingQueuedSnapshots(): void;
    _startCapture(): void;
    _updateWindowAndSessionIds(event: eventWithTime): void;
    _onScriptLoaded(): void;
    onRRwebEmit(event: eventWithTime): void;
    _captureSnapshot(properties: Properties): void;
}
