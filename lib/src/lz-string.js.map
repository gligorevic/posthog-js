{"version":3,"file":"lz-string.js","sourceRoot":"","sources":["../../src/lz-string.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.4\n\n// private property\nconst f = String.fromCharCode\nconst keyStrBase64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\nconst keyStrUriSafe = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$'\nconst baseReverseDic: Record<string, Record<string, number>> = {}\n\nfunction getBaseValue(alphabet: string, character: string) {\n    if (!baseReverseDic[alphabet]) {\n        baseReverseDic[alphabet] = {}\n        for (let i = 0; i < alphabet.length; i++) {\n            baseReverseDic[alphabet][alphabet.charAt(i)] = i\n        }\n    }\n    return baseReverseDic[alphabet][character]\n}\n\nexport const LZString = {\n    compressToBase64: function (input: null | string) {\n        if (input == null) return ''\n        const res = LZString._compress(input, 6, function (a) {\n            return keyStrBase64.charAt(a)\n        })\n        switch (\n            res.length % 4 // To produce valid Base64\n        ) {\n            default: // When could this happen ?\n            case 0:\n                return res\n            case 1:\n                return res + '==='\n            case 2:\n                return res + '=='\n            case 3:\n                return res + '='\n        }\n    },\n\n    decompressFromBase64: function (input: string | null): string | null {\n        if (input == null) return ''\n        if (input == '') return null\n        return LZString._decompress(input.length, 32, function (index) {\n            return getBaseValue(keyStrBase64, input.charAt(index))\n        })\n    },\n\n    compressToUTF16: function (input: string | null): string | null {\n        if (input == null) return ''\n        return (\n            LZString._compress(input, 15, function (a) {\n                return f(a + 32)\n            }) + ' '\n        )\n    },\n\n    decompressFromUTF16: function (compressed: string | null): string | null {\n        if (compressed == null) return ''\n        if (compressed == '') return null\n        return LZString._decompress(compressed.length, 16384, function (index) {\n            return compressed.charCodeAt(index) - 32\n        })\n    },\n\n    //compress into uint8array (UCS-2 big endian format)\n    compressToUint8Array: function (uncompressed: string | null): Uint8Array {\n        const compressed = LZString.compress(uncompressed)\n        const buf = new Uint8Array(compressed.length * 2) // 2 bytes per character\n\n        for (let i = 0, TotalLen = compressed.length; i < TotalLen; i++) {\n            const current_value = compressed.charCodeAt(i)\n            buf[i * 2] = current_value >>> 8\n            buf[i * 2 + 1] = current_value % 256\n        }\n        return buf\n    },\n\n    //decompress from uint8array (UCS-2 big endian format)\n    decompressFromUint8Array: function (compressed: Uint8Array): string | null {\n        if (compressed === null || compressed === undefined) {\n            return LZString.decompress(compressed)\n        } else {\n            const buf = new Array(compressed.length / 2) // 2 bytes per character\n            for (let i = 0, TotalLen = buf.length; i < TotalLen; i++) {\n                buf[i] = compressed[i * 2] * 256 + compressed[i * 2 + 1]\n            }\n\n            const result: string[] = []\n            buf.forEach(function (c) {\n                result.push(f(c))\n            })\n            return LZString.decompress(result.join(''))\n        }\n    },\n\n    //compress into a string that is already URI encoded\n    compressToEncodedURIComponent: function (input: string | null): string | null {\n        if (input == null) return ''\n        return LZString._compress(input, 6, function (a) {\n            return keyStrUriSafe.charAt(a)\n        })\n    },\n\n    //decompress from an output of compressToEncodedURIComponent\n    decompressFromEncodedURIComponent: function (input: string | null): string | null {\n        if (input == null) return ''\n        if (input == '') return null\n        input = input.replace(/ /g, '+')\n        return LZString._decompress(input.length, 32, function (index) {\n            return getBaseValue(keyStrUriSafe, (input as string).charAt(index))\n        })\n    },\n\n    compress: function (uncompressed: string | null): string {\n        return LZString._compress(uncompressed, 16, function (a) {\n            return f(a)\n        })\n    },\n    _compress: function (\n        uncompressed: string | null,\n        bitsPerChar: number,\n        getCharFromInt: (number: number) => string\n    ): string {\n        if (uncompressed == null) return ''\n        let i,\n            value,\n            context_c = '',\n            context_wc = '',\n            context_w = '',\n            context_enlargeIn = 2, // Compensate for the first entry which should not count\n            context_dictSize = 3,\n            context_numBits = 2,\n            context_data_val = 0,\n            context_data_position = 0,\n            ii\n        const context_dictionary: Record<string, number> = {},\n            context_dictionaryToCreate: Record<string, boolean> = {},\n            context_data = []\n\n        for (ii = 0; ii < uncompressed.length; ii += 1) {\n            context_c = uncompressed.charAt(ii)\n            if (!Object.prototype.hasOwnProperty.call(context_dictionary, context_c)) {\n                context_dictionary[context_c] = context_dictSize++\n                context_dictionaryToCreate[context_c] = true\n            }\n\n            context_wc = context_w + context_c\n            if (Object.prototype.hasOwnProperty.call(context_dictionary, context_wc)) {\n                context_w = context_wc\n            } else {\n                if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {\n                    if (context_w.charCodeAt(0) < 256) {\n                        for (i = 0; i < context_numBits; i++) {\n                            context_data_val = context_data_val << 1\n                            if (context_data_position == bitsPerChar - 1) {\n                                context_data_position = 0\n                                context_data.push(getCharFromInt(context_data_val))\n                                context_data_val = 0\n                            } else {\n                                context_data_position++\n                            }\n                        }\n                        value = context_w.charCodeAt(0)\n                        for (i = 0; i < 8; i++) {\n                            context_data_val = (context_data_val << 1) | (value & 1)\n                            if (context_data_position == bitsPerChar - 1) {\n                                context_data_position = 0\n                                context_data.push(getCharFromInt(context_data_val))\n                                context_data_val = 0\n                            } else {\n                                context_data_position++\n                            }\n                            value = value >> 1\n                        }\n                    } else {\n                        value = 1\n                        for (i = 0; i < context_numBits; i++) {\n                            context_data_val = (context_data_val << 1) | value\n                            if (context_data_position == bitsPerChar - 1) {\n                                context_data_position = 0\n                                context_data.push(getCharFromInt(context_data_val))\n                                context_data_val = 0\n                            } else {\n                                context_data_position++\n                            }\n                            value = 0\n                        }\n                        value = context_w.charCodeAt(0)\n                        for (i = 0; i < 16; i++) {\n                            context_data_val = (context_data_val << 1) | (value & 1)\n                            if (context_data_position == bitsPerChar - 1) {\n                                context_data_position = 0\n                                context_data.push(getCharFromInt(context_data_val))\n                                context_data_val = 0\n                            } else {\n                                context_data_position++\n                            }\n                            value = value >> 1\n                        }\n                    }\n                    context_enlargeIn--\n                    if (context_enlargeIn == 0) {\n                        context_enlargeIn = Math.pow(2, context_numBits)\n                        context_numBits++\n                    }\n                    delete context_dictionaryToCreate[context_w]\n                } else {\n                    value = context_dictionary[context_w]\n                    for (i = 0; i < context_numBits; i++) {\n                        context_data_val = (context_data_val << 1) | (value & 1)\n                        if (context_data_position == bitsPerChar - 1) {\n                            context_data_position = 0\n                            context_data.push(getCharFromInt(context_data_val))\n                            context_data_val = 0\n                        } else {\n                            context_data_position++\n                        }\n                        value = value >> 1\n                    }\n                }\n                context_enlargeIn--\n                if (context_enlargeIn == 0) {\n                    context_enlargeIn = Math.pow(2, context_numBits)\n                    context_numBits++\n                }\n                // Add wc to the dictionary.\n                context_dictionary[context_wc] = context_dictSize++\n                context_w = String(context_c)\n            }\n        }\n\n        // Output the code for w.\n        if (context_w !== '') {\n            if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {\n                if (context_w.charCodeAt(0) < 256) {\n                    for (i = 0; i < context_numBits; i++) {\n                        context_data_val = context_data_val << 1\n                        if (context_data_position == bitsPerChar - 1) {\n                            context_data_position = 0\n                            context_data.push(getCharFromInt(context_data_val))\n                            context_data_val = 0\n                        } else {\n                            context_data_position++\n                        }\n                    }\n                    value = context_w.charCodeAt(0)\n                    for (i = 0; i < 8; i++) {\n                        context_data_val = (context_data_val << 1) | (value & 1)\n                        if (context_data_position == bitsPerChar - 1) {\n                            context_data_position = 0\n                            context_data.push(getCharFromInt(context_data_val))\n                            context_data_val = 0\n                        } else {\n                            context_data_position++\n                        }\n                        value = value >> 1\n                    }\n                } else {\n                    value = 1\n                    for (i = 0; i < context_numBits; i++) {\n                        context_data_val = (context_data_val << 1) | value\n                        if (context_data_position == bitsPerChar - 1) {\n                            context_data_position = 0\n                            context_data.push(getCharFromInt(context_data_val))\n                            context_data_val = 0\n                        } else {\n                            context_data_position++\n                        }\n                        value = 0\n                    }\n                    value = context_w.charCodeAt(0)\n                    for (i = 0; i < 16; i++) {\n                        context_data_val = (context_data_val << 1) | (value & 1)\n                        if (context_data_position == bitsPerChar - 1) {\n                            context_data_position = 0\n                            context_data.push(getCharFromInt(context_data_val))\n                            context_data_val = 0\n                        } else {\n                            context_data_position++\n                        }\n                        value = value >> 1\n                    }\n                }\n                context_enlargeIn--\n                if (context_enlargeIn == 0) {\n                    context_enlargeIn = Math.pow(2, context_numBits)\n                    context_numBits++\n                }\n                delete context_dictionaryToCreate[context_w]\n            } else {\n                value = context_dictionary[context_w]\n                for (i = 0; i < context_numBits; i++) {\n                    context_data_val = (context_data_val << 1) | (value & 1)\n                    if (context_data_position == bitsPerChar - 1) {\n                        context_data_position = 0\n                        context_data.push(getCharFromInt(context_data_val))\n                        context_data_val = 0\n                    } else {\n                        context_data_position++\n                    }\n                    value = value >> 1\n                }\n            }\n            context_enlargeIn--\n            if (context_enlargeIn == 0) {\n                context_enlargeIn = Math.pow(2, context_numBits)\n                context_numBits++\n            }\n        }\n\n        // Mark the end of the stream\n        value = 2\n        for (i = 0; i < context_numBits; i++) {\n            context_data_val = (context_data_val << 1) | (value & 1)\n            if (context_data_position == bitsPerChar - 1) {\n                context_data_position = 0\n                context_data.push(getCharFromInt(context_data_val))\n                context_data_val = 0\n            } else {\n                context_data_position++\n            }\n            value = value >> 1\n        }\n\n        // Flush the last char\n        while (true) {\n            context_data_val = context_data_val << 1\n            if (context_data_position == bitsPerChar - 1) {\n                context_data.push(getCharFromInt(context_data_val))\n                break\n            } else context_data_position++\n        }\n        return context_data.join('')\n    },\n\n    decompress: function (compressed: string | null) {\n        if (compressed == null) return ''\n        if (compressed == '') return null\n        return LZString._decompress(compressed.length, 32768, function (index) {\n            return compressed.charCodeAt(index)\n        })\n    },\n\n    _decompress: function (length: number, resetValue: number, getNextValue: (index: number) => number) {\n        const dictionary: (string | number)[] = [],\n            result = [],\n            data = { val: getNextValue(0), position: resetValue, index: 1 }\n        let enlargeIn = 4,\n            dictSize = 4,\n            numBits = 3,\n            entry = '',\n            i: number,\n            w: string | number,\n            bits: number,\n            resb: number,\n            maxpower: number,\n            power: number,\n            c: string | number\n\n        for (i = 0; i < 3; i += 1) {\n            dictionary[i] = i\n        }\n\n        bits = 0\n        maxpower = Math.pow(2, 2)\n        power = 1\n        while (power != maxpower) {\n            resb = data.val & data.position\n            data.position >>= 1\n            if (data.position == 0) {\n                data.position = resetValue\n                data.val = getNextValue(data.index++)\n            }\n            bits |= (resb > 0 ? 1 : 0) * power\n            power <<= 1\n        }\n\n        switch (bits) {\n            case 0:\n                bits = 0\n                maxpower = Math.pow(2, 8)\n                power = 1\n                while (power != maxpower) {\n                    resb = data.val & data.position\n                    data.position >>= 1\n                    if (data.position == 0) {\n                        data.position = resetValue\n                        data.val = getNextValue(data.index++)\n                    }\n                    bits |= (resb > 0 ? 1 : 0) * power\n                    power <<= 1\n                }\n                c = f(bits)\n                break\n            case 1:\n                bits = 0\n                maxpower = Math.pow(2, 16)\n                power = 1\n                while (power != maxpower) {\n                    resb = data.val & data.position\n                    data.position >>= 1\n                    if (data.position == 0) {\n                        data.position = resetValue\n                        data.val = getNextValue(data.index++)\n                    }\n                    bits |= (resb > 0 ? 1 : 0) * power\n                    power <<= 1\n                }\n                c = f(bits)\n                break\n            case 2:\n                return ''\n        }\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        dictionary[3] = c\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        w = c\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        result.push(c)\n        while (true) {\n            if (data.index > length) {\n                return ''\n            }\n\n            bits = 0\n            maxpower = Math.pow(2, numBits)\n            power = 1\n            while (power != maxpower) {\n                resb = data.val & data.position\n                data.position >>= 1\n                if (data.position == 0) {\n                    data.position = resetValue\n                    data.val = getNextValue(data.index++)\n                }\n                bits |= (resb > 0 ? 1 : 0) * power\n                power <<= 1\n            }\n\n            switch ((c = bits)) {\n                case 0:\n                    bits = 0\n                    maxpower = Math.pow(2, 8)\n                    power = 1\n                    while (power != maxpower) {\n                        resb = data.val & data.position\n                        data.position >>= 1\n                        if (data.position == 0) {\n                            data.position = resetValue\n                            data.val = getNextValue(data.index++)\n                        }\n                        bits |= (resb > 0 ? 1 : 0) * power\n                        power <<= 1\n                    }\n\n                    dictionary[dictSize++] = f(bits)\n                    c = dictSize - 1\n                    enlargeIn--\n                    break\n                case 1:\n                    bits = 0\n                    maxpower = Math.pow(2, 16)\n                    power = 1\n                    while (power != maxpower) {\n                        resb = data.val & data.position\n                        data.position >>= 1\n                        if (data.position == 0) {\n                            data.position = resetValue\n                            data.val = getNextValue(data.index++)\n                        }\n                        bits |= (resb > 0 ? 1 : 0) * power\n                        power <<= 1\n                    }\n                    dictionary[dictSize++] = f(bits)\n                    c = dictSize - 1\n                    enlargeIn--\n                    break\n                case 2:\n                    return result.join('')\n            }\n\n            if (enlargeIn == 0) {\n                enlargeIn = Math.pow(2, numBits)\n                numBits++\n            }\n\n            if (dictionary[c]) {\n                entry = dictionary[c] as string\n            } else {\n                if (c === dictSize) {\n                    entry = w + (w as string).charAt(0)\n                } else {\n                    return null\n                }\n            }\n            result.push(entry)\n\n            // Add w+entry[0] to the dictionary.\n            dictionary[dictSize++] = w + entry.charAt(0)\n            enlargeIn--\n\n            w = entry\n\n            if (enlargeIn == 0) {\n                enlargeIn = Math.pow(2, numBits)\n                numBits++\n            }\n        }\n    },\n}\n"]}