{"version":3,"file":"decide.js","sourceRoot":"","sources":["../../src/decide.ts"],"names":[],"mappings":"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","sourcesContent":["import { autocapture } from './autocapture'\nimport { _base64Encode, loadScript } from './utils'\nimport { PostHog } from './posthog-core'\nimport { Compression, DecideResponse } from './types'\n\nexport class Decide {\n    instance: PostHog\n\n    constructor(instance: PostHog) {\n        this.instance = instance\n        // don't need to wait for `decide` to return if flags were provided on initialisation\n        this.instance.decideEndpointWasHit = this.instance._hasBootstrappedFeatureFlags()\n    }\n\n    call(): void {\n        /*\n        Calls /decide endpoint to fetch options for autocapture, session recording, feature flags & compression.\n        */\n        const json_data = JSON.stringify({\n            token: this.instance.get_config('token'),\n            distinct_id: this.instance.get_distinct_id(),\n            groups: this.instance.getGroups(),\n        })\n\n        const encoded_data = _base64Encode(json_data)\n        this.instance._send_request(\n            `${this.instance.get_config('api_host')}/decide/?v=3`,\n            { data: encoded_data, verbose: true },\n            { method: 'POST' },\n            (response) => this.parseDecideResponse(response as DecideResponse)\n        )\n    }\n\n    parseDecideResponse(response: DecideResponse): void {\n        if (response?.status === 0) {\n            console.error('Failed to fetch feature flags from PostHog.')\n            return\n        }\n        this.instance.decideEndpointWasHit = true\n        if (!(document && document.body)) {\n            console.log('document not ready yet, trying again in 500 milliseconds...')\n            setTimeout(() => {\n                this.parseDecideResponse(response)\n            }, 500)\n            return\n        }\n\n        this.instance.toolbar.afterDecideResponse(response)\n        this.instance.sessionRecording?.afterDecideResponse(response)\n        autocapture.afterDecideResponse(response, this.instance)\n        this.instance.webPerformance?.afterDecideResponse(response)\n\n        this.instance.featureFlags.receivedFeatureFlags(response)\n\n        this.instance['compression'] = {}\n        if (response['supportedCompression'] && !this.instance.get_config('disable_compression')) {\n            const compression: Partial<Record<Compression, boolean>> = {}\n            for (const method of response['supportedCompression']) {\n                compression[method] = true\n            }\n            this.instance['compression'] = compression\n        }\n\n        if (response['siteApps']) {\n            if (this.instance.get_config('opt_in_site_apps')) {\n                const apiHost = this.instance.get_config('api_host')\n                for (const { id, url } of response['siteApps']) {\n                    const scriptUrl = [\n                        apiHost,\n                        apiHost[apiHost.length - 1] === '/' && url[0] === '/' ? url.substring(1) : url,\n                    ].join('')\n\n                    ;(window as any)[`__$$ph_site_app_${id}`] = this.instance\n\n                    loadScript(scriptUrl, (err) => {\n                        if (err) {\n                            console.error(`Error while initializing PostHog app with config id ${id}`, err)\n                        }\n                    })\n                }\n            } else if (response['siteApps'].length > 0) {\n                console.error('PostHog site apps are disabled. Enable the \"opt_in_site_apps\" config to proceed.')\n            }\n        }\n    }\n}\n"]}