{"version":3,"file":"send-request.js","sourceRoot":"","sources":["../../src/send-request.ts"],"names":[],"mappings":"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","sourcesContent":["import { _each, _HTTPBuildQuery, logger } from './utils'\nimport Config from './config'\nimport { PostData, XHROptions, XHRParams } from './types'\n\nexport const addParamsToURL = (\n    url: string,\n    urlQueryArgs: Record<string, any> | undefined,\n    parameterOptions: { ip?: boolean }\n): string => {\n    const args = urlQueryArgs || {}\n    args['ip'] = parameterOptions['ip'] ? 1 : 0\n    args['_'] = new Date().getTime().toString()\n    args['ver'] = Config.LIB_VERSION\n\n    const halves = url.split('?')\n    if (halves.length > 1) {\n        const params = halves[1].split('&')\n        for (const p of params) {\n            const key = p.split('=')[0]\n            if (args[key]) {\n                delete args[key]\n            }\n        }\n    }\n\n    const argSeparator = url.indexOf('?') > -1 ? '&' : '?'\n    return url + argSeparator + _HTTPBuildQuery(args)\n}\n\nexport const encodePostData = (data: PostData | Uint8Array, options: Partial<XHROptions>): string | BlobPart | null => {\n    if (options.blob && data.buffer) {\n        return new Blob([data.buffer], { type: 'text/plain' })\n    }\n\n    if (options.sendBeacon || options.blob) {\n        const body = encodePostData(data, { method: 'POST' }) as BlobPart\n        return new Blob([body], { type: 'application/x-www-form-urlencoded' })\n    }\n\n    if (options.method !== 'POST') {\n        return null\n    }\n\n    let body_data\n    const isUint8Array = (d: unknown): d is Uint8Array => Object.prototype.toString.call(d) === '[object Uint8Array]'\n    if (Array.isArray(data) || isUint8Array(data)) {\n        // TODO: eh? passing an Array here?\n        body_data = 'data=' + encodeURIComponent(data as any)\n    } else {\n        body_data = 'data=' + encodeURIComponent(data.data as string)\n    }\n\n    if ('compression' in data && data.compression) {\n        body_data += '&compression=' + data.compression\n    }\n\n    return body_data\n}\n\nexport const xhr = ({\n    url,\n    data,\n    headers,\n    options,\n    captureMetrics,\n    callback,\n    retriesPerformedSoFar,\n    retryQueue,\n    onXHRError,\n    timeout = 10000,\n}: XHRParams) => {\n    const req = new XMLHttpRequest()\n    req.open(options.method || 'GET', url, true)\n\n    const body = encodePostData(data, options)\n\n    captureMetrics.incr('_send_request')\n    captureMetrics.incr('_send_request_inflight')\n\n    _each(headers, function (headerValue, headerName) {\n        req.setRequestHeader(headerName, headerValue)\n    })\n\n    if (options.method === 'POST' && !options.blob) {\n        req.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded')\n    }\n\n    req.timeout = timeout\n    // send the ph_optout cookie\n    // withCredentials cannot be modified until after calling .open on Android and Mobile Safari\n    req.withCredentials = true\n    req.onreadystatechange = () => {\n        if (req.readyState === 4) {\n            captureMetrics.incr(`xhr-response`)\n            captureMetrics.incr(`xhr-response-${req.status}`)\n            captureMetrics.decr('_send_request_inflight')\n\n            // XMLHttpRequest.DONE == 4, except in safari 4\n            if (req.status === 200) {\n                if (callback) {\n                    let response\n                    try {\n                        response = JSON.parse(req.responseText)\n                    } catch (e) {\n                        logger.error(e)\n                        return\n                    }\n                    callback(response)\n                }\n            } else {\n                if (typeof onXHRError === 'function') {\n                    onXHRError(req)\n                }\n\n                // don't retry certain errors\n                if ([401, 403, 404, 500].indexOf(req.status) < 0) {\n                    retryQueue.enqueue({\n                        url,\n                        data,\n                        options,\n                        headers,\n                        retriesPerformedSoFar: (retriesPerformedSoFar || 0) + 1,\n                        callback,\n                    })\n                }\n\n                if (callback) {\n                    callback({ status: 0 })\n                }\n            }\n        }\n    }\n    req.send(body)\n}\n"]}